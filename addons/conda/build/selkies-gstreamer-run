#!/usr/bin/env bash
set -e

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Set log directory
export LOGDIR="${LOGDIR:-/tmp}"
# Set default display
export DISPLAY="${DISPLAY:-:0}"

# Activate Conda environment in bin directory
. "$(dirname -- "$( readlink -f -- "$0"; )";)/activate"

export GSTREAMER_PATH="${CONDA_PREFIX}"
export PATH="${GSTREAMER_PATH}/bin${PATH:+:${PATH}}"
export LD_LIBRARY_PATH="${GSTREAMER_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
export GST_PLUGIN_PATH="${GSTREAMER_PATH}/lib/gstreamer-1.0${GST_PLUGIN_PATH:+:${GST_PLUGIN_PATH}}"
export GST_PLUGIN_SYSTEM_PATH="${XDG_DATA_HOME:-${HOME:-~}/.local/share}/gstreamer-1.0/plugins:/usr/lib/x86_64-linux-gnu/gstreamer-1.0:/usr/lib/aarch64-linux-gnu/gstreamer-1.0:/usr/lib/arm-linux-gnueabihf/gstreamer-1.0:/usr/lib/powerpc64le-linux-gnu/gstreamer-1.0:/usr/lib/s390x-linux-gnu/gstreamer-1.0:/usr/lib/riscv64-linux-gnu/gstreamer-1.0:/usr/lib64/gstreamer-1.0:/usr/lib/gstreamer-1.0:/usr/lib/i386-linux-gnu/gstreamer-1.0:/usr/lib32/gstreamer-1.0${GST_PLUGIN_SYSTEM_PATH:+:${GST_PLUGIN_SYSTEM_PATH}}"
export GI_TYPELIB_PATH="${GSTREAMER_PATH}/lib/girepository-1.0:/usr/lib/x86_64-linux-gnu/girepository-1.0:/usr/lib/aarch64-linux-gnu/girepository-1.0:/usr/lib/arm-linux-gnueabihf/girepository-1.0:/usr/lib/powerpc64le-linux-gnu/girepository-1.0:/usr/lib/s390x-linux-gnu/girepository-1.0:/usr/lib/riscv64-linux-gnu/girepository-1.0:/usr/lib64/girepository-1.0:/usr/lib/girepository-1.0:/usr/lib/i386-linux-gnu/girepository-1.0:/usr/lib32/girepository-1.0${GI_TYPELIB_PATH:+:${GI_TYPELIB_PATH}}"

# Start Xvfb server in DISPLAY if needed (package xvfb in Debian or xorg-x11-server-Xvfb in RHEL required in host)
if [ ! -S "/tmp/.X11-unix/X${DISPLAY#*:}" ] && [ -x "$(command -v Xvfb)" ] || [ "$(echo ${ENABLE_XVFB} | tr '[:upper:]' '[:lower:]')" = "true" ]; then
    export ENABLE_XVFB="true"
    Xvfb "${DISPLAY}" -screen 0 8192x4096x24 +extension "COMPOSITE" +extension "DAMAGE" +extension "GLX" +extension "RANDR" +extension "RENDER" +extension "MIT-SHM" +extension "XFIXES" +extension "XTEST" +iglx +render -nolisten "tcp" -ac -noreset -shmem >${LOGDIR}/Xvfb_selkies.log 2>&1 &
fi

# Wait for X server to start
echo 'Waiting for X Socket' && until [ -S "/tmp/.X11-unix/X${DISPLAY#*:}" ]; do sleep 0.5; done && echo 'X Server is ready'

# Use selkies-gstreamer-resize to resize the screen, xrandr required in host (package x11-xserver-utils in Debian or xorg-x11-server-utils/xrandr in RHEL)
if [ "$(echo ${ENABLE_XVFB} | tr '[:upper:]' '[:lower:]')" = "true" ]; then ${CONDA_PREFIX}/bin/python ${CONDA_PREFIX}/bin/selkies-gstreamer-resize 1920x1080; fi

# PulseAudio server socket location
export PIPEWIRE_LATENCY="32/48000"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"
export PIPEWIRE_RUNTIME_DIR="${PIPEWIRE_RUNTIME_DIR:-${XDG_RUNTIME_DIR:-/tmp}}"
export PULSE_RUNTIME_PATH="${PULSE_RUNTIME_PATH:-${XDG_RUNTIME_DIR:-/tmp}/pulse}"
export PULSE_SERVER="${PULSE_SERVER:-unix:${PULSE_RUNTIME_PATH:-${XDG_RUNTIME_DIR:-/tmp}/pulse}/native}"

# Start PulseAudio server in PULSE_SERVER if needed (bundled with Conda, running applications may need to restart or run afterwards to relay audio)
if [ "$(echo ${ENABLE_PULSEAUDIO} | tr '[:upper:]' '[:lower:]')" = "true" ] || [ ! -S "${PULSE_SERVER#*:}" ]; then
    export ENABLE_PULSEAUDIO="true"
    export PULSE_CONFIG="${CONDA_PREFIX}/etc/pulse/daemon.conf"
    export PULSE_DLPATH="${CONDA_PREFIX}/lib/pulseaudio/modules"
    ${CONDA_PREFIX}/bin/pulseaudio --verbose --log-target=file:${LOGDIR}/pulseaudio_selkies.log --disallow-exit --exit-idle-time="-1" -F "${CONDA_PREFIX}/etc/pulse/default.pa" &
fi

# Clear the cache registry
rm -rf "${HOME}/.cache/gstreamer-1.0"

# Set Selkies environment variables
export SELKIES_WEB_ROOT="${SELKIES_WEB_ROOT:-${CONDA_PREFIX}/share/selkies-web}"

${CONDA_PREFIX}/bin/python ${CONDA_PREFIX}/bin/selkies-gstreamer $@
